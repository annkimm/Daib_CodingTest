{"ast":null,"code":"var _jsxFileName = \"/Users/gimminji/study/assignment/daib/src/pages/Main/Main.js\";\nimport React from 'react';\nimport axios from \"axios\";\n\nconst Main = () => {\n  const dateGet = async () => {\n    try {\n      const response = await axios.get(\"\");\n      const data = await response.json();\n      return data;\n    } catch (error) {}\n\n    axios.get(\"\").catch(function (error) {\n      if (error.response) {\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n        // Node.js의 http.ClientRequest 인스턴스입니다.\n        console.log(error.request);\n      } else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log('Error', error.message);\n      }\n\n      console.log(error.config);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"sdfsfd\");\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/gimminji/study/assignment/daib/src/pages/Main/Main.js"],"names":["React","axios","Main","dateGet","response","get","data","json","error","catch","console","log","status","headers","request","message","config"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEf,QAAMC,OAAO,GAAG,YAAY;AAExB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAN,CAAU,EAAV,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,aAAOD,IAAP;AACH,KALD,CAKE,OAAOE,KAAP,EAAc,CAEf;;AAEDP,IAAAA,KAAK,CAACI,GAAN,CAAU,EAAV,EAAcI,KAAd,CAAoB,UAAUD,KAAV,EAAiB;AACjC,UAAIA,KAAK,CAACJ,QAAV,EAAoB;AAClB;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACJ,QAAN,CAAeE,IAA3B;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACJ,QAAN,CAAeQ,MAA3B;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACJ,QAAN,CAAeS,OAA3B;AACD,OALD,MAMK,IAAIL,KAAK,CAACM,OAAV,EAAmB;AACtB;AACA;AACA;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACM,OAAlB;AACD,OALI,MAMA;AACH;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAAK,CAACO,OAA3B;AACD;;AACDL,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACQ,MAAlB;AACH,KAlBD;AAmBH,GA9BD;;AAiCA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,CAxCD;;AA0CA,eAAed,IAAf","sourcesContent":["import React from 'react';\nimport axios from \"axios\"\n\nconst Main = () => {\n\n    const dateGet = async () => {\n\n        try {\n            const response = await axios.get(\"\");\n            const data = await response.json();\n\n            return data;\n        } catch (error) {\n            \n        }\n\n        axios.get(\"\").catch(function (error) {\n            if (error.response) {\n              // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n              console.log(error.response.data);\n              console.log(error.response.status);\n              console.log(error.response.headers);\n            }\n            else if (error.request) {\n              // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n              // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n              // Node.js의 http.ClientRequest 인스턴스입니다.\n              console.log(error.request);\n            }\n            else {\n              // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n              console.log('Error', error.message);\n            }\n            console.log(error.config);\n        });\n    }\n\n\n    return (\n        <div>\n            sdfsfd\n        </div>\n    );\n};\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}